var mschema = require('../');

// see '/tests' folder for alternate syntax and examples

var userSchema = {
  'name.firstName': {},
    'name.lastName': {},
    'name.findName': { 'firstName,': { type: 'any' }, lastName: { type: 'any' } },
    'name.prefix': {},
    'name.suffix': {},
    'address.zipCode': {},
    'address.city': {},
    'address.cityPrefix': {},
    'address.citySuffix': {},
    'address.streetName': {},
    'address.streetAddress': { useFullAddress: { type: 'any' } },
    'address.streetSuffix': {},
    'address.secondaryAddress': {},
    'address.county': {},
    'address.country': {},
    'address.state': { useAbbr: { type: 'any' } },
    'address.stateAbbr': {},
    'address.latitude': {},
    'address.longitude': {},
    'phone.phoneNumber': { format: { type: 'any' } },
    'phone.phoneNumberFormat': { phoneFormatsArrayIndex: { type: 'any' } },
    'phone.phoneFormats': {},
    'internet.avatar': {},
    'internet.email': 
     { 'firstName,': { type: 'any' },
       'lastName,': { type: 'any' },
       provider: { type: 'any' } },
    'internet.userName': { 'firstName,': { type: 'any' }, lastName: { type: 'any' } },
    'internet.domainName': {},
    'internet.domainSuffix': {},
    'internet.domainWord': {},
    'internet.ip': {},
    'internet.userAgent': {},
    'internet.color': 
     { 'baseRed255,': { type: 'any' },
       'baseGreen255,': { type: 'any' },
       baseBlue255: { type: 'any' } },
    'internet.password': 
     { 'len,': { type: 'any' },
       'memorable,': { type: 'any' },
       'pattern,': { type: 'any' },
       prefix: { type: 'any' } },
    'company.suffixes': {},
    'company.companyName': { format: { type: 'any' } },
    'company.companySuffix': {},
    'company.catchPhrase': {},
    'company.bs': {},
    'company.catchPhraseAdjective': {},
    'company.catchPhraseDescriptor': {},
    'company.catchPhraseNoun': {},
    'company.bsAdjective': {},
    'company.bsBuzz': {},
    'company.bsNoun': {},
    'image.image': {},
    'image.avatar': {},
    'image.imageUrl': 
     { 'width,': { type: 'any' },
       'height,': { type: 'any' },
       category: { type: 'any' } },
    'image.abstract': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.animals': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.business': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.cats': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.city': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.food': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.nightlife': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.fashion': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.people': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.nature': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.sports': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.technics': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'image.transport': { 'width,': { type: 'any' }, height: { type: 'any' } },
    'lorem.words': { num: { type: 'any' } },
    'lorem.sentence': { 'wordCount,': { type: 'any' }, range: { type: 'any' } },
    'lorem.sentences': { sentenceCount: { type: 'any' } },
    'lorem.paragraph': { sentenceCount: { type: 'any' } },
    'lorem.paragraphs': { paragraphCount: { type: 'any' } },
    'helpers.randomNumber': { range: { type: 'any' } },
    'helpers.randomize': { array: { type: 'any' } },
    'helpers.slugify': { string: { type: 'any' } },
    'helpers.replaceSymbolWithNumber': { 'string,': { type: 'any' }, symbol: { type: 'any' } },
    'helpers.shuffle': { o: { type: 'any' } },
    'helpers.mustache': { 'str,': { type: 'any' }, data: { type: 'any' } },
    'helpers.createCard': {},
    'helpers.contextualCard': {},
    'helpers.userCard': {},
    'helpers.createTransaction': { '){': { type: 'any' } },
    'date.past': { 'years,': { type: 'any' }, refDate: { type: 'any' } },
    'date.future': { 'years,': { type: 'any' }, refDate: { type: 'any' } },
    'date.between': { 'from,': { type: 'any' }, to: { type: 'any' } },
    'date.recent': { days: { type: 'any' } },
    'random.number': { options: { type: 'any' } },
    'random.array_element': { array: { type: 'any' } },
    'random.object_element': { 'object,': { type: 'any' }, field: { type: 'any' } },
    'random.uuid': {},
    'finance.account': { length: { type: 'any' } },
    'finance.accountName': {},
    'finance.mask': 
     { 'length,': { type: 'any' },
       'parens,': { type: 'any' },
       elipsis: { type: 'any' } },
    'finance.amount': 
     { 'min,': { type: 'any' },
       'max,': { type: 'any' },
       'dec,': { type: 'any' },
       symbol: { type: 'any' } },
    'finance.transactionType': {},
    'finance.currencyCode': {},
    'finance.currencyName': {},
    'finance.currencySymbol': {},
    'hacker.abbreviation': {},
    'hacker.adjective': {},
    'hacker.noun': {},
    'hacker.verb': {},
    'hacker.ingverb': {},
    'hacker.phrase': {} 
}

var user = {
  "name": "Marak",
  "password": "atleasteight",
  "email": "foo@bar.com"
}

// validates true
console.log(mschema.validate(user, userSchema));

var invalidUser = {
  "name": "M",
  "password": "1234",
  "email": "foo@bar.com"
}

// validates false with errors
console.log(mschema.validate(invalidUser, userSchema));

