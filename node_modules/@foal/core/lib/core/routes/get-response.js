"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResponse = void 0;
const http_1 = require("../http");
const convert_error_to_response_1 = require("./convert-error-to-response");
async function getResponse(route, ctx, services, appController) {
    let response;
    const hookPostFunctions = [];
    for (const hook of route.hooks) {
        let result;
        try {
            result = await hook(ctx, services);
        }
        catch (error) {
            result = await (0, convert_error_to_response_1.convertErrorToResponse)(error, ctx, appController);
        }
        if ((0, http_1.isHttpResponse)(result)) {
            response = result;
            break;
        }
        else if (typeof result === 'function') {
            hookPostFunctions.unshift(result);
        }
    }
    if (!(0, http_1.isHttpResponse)(response)) {
        try {
            response = await route.controller[route.propertyKey](ctx, ctx.request.params, ctx.request.body);
        }
        catch (error) {
            response = await (0, convert_error_to_response_1.convertErrorToResponse)(error, ctx, appController);
        }
    }
    if (!(0, http_1.isHttpResponse)(response)) {
        const error = new Error(`The controller method "${route.propertyKey}" should return an HttpResponse.`);
        response = await (0, convert_error_to_response_1.convertErrorToResponse)(error, ctx, appController);
    }
    for (const postFn of hookPostFunctions) {
        try {
            await postFn(response);
        }
        catch (error) {
            response = await (0, convert_error_to_response_1.convertErrorToResponse)(error, ctx, appController);
        }
    }
    return response;
}
exports.getResponse = getResponse;
