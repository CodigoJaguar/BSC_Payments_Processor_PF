"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHttpResponseNotImplemented = exports.HttpResponseNotImplemented = exports.isHttpResponseInternalServerError = exports.HttpResponseInternalServerError = exports.isHttpResponseServerError = exports.HttpResponseServerError = exports.isHttpResponseTooManyRequests = exports.HttpResponseTooManyRequests = exports.isHttpResponseConflict = exports.HttpResponseConflict = exports.isHttpResponseMethodNotAllowed = exports.HttpResponseMethodNotAllowed = exports.isHttpResponseNotFound = exports.HttpResponseNotFound = exports.isHttpResponseForbidden = exports.HttpResponseForbidden = exports.isHttpResponseUnauthorized = exports.HttpResponseUnauthorized = exports.isHttpResponseBadRequest = exports.HttpResponseBadRequest = exports.isHttpResponseClientError = exports.HttpResponseClientError = exports.isHttpResponseRedirect = exports.HttpResponseRedirect = exports.isHttpResponseMovedPermanently = exports.HttpResponseMovedPermanently = exports.isHttpResponseRedirection = exports.HttpResponseRedirection = exports.isHttpResponseNoContent = exports.HttpResponseNoContent = exports.isHttpResponseCreated = exports.HttpResponseCreated = exports.isHttpResponseOK = exports.HttpResponseOK = exports.isHttpResponseSuccess = exports.HttpResponseSuccess = exports.isHttpResponse = exports.HttpResponse = void 0;
/**
 * Represent an HTTP response. This class must be extended.
 * Instances of HttpResponse are returned in hooks and controller
 * methods.
 *
 * @export
 * @abstract
 * @class HttpResponse
 */
class HttpResponse {
    /**
     * Create an instance of HttpResponse.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponse
     */
    constructor(body, options = {}) {
        /**
         * Property used internally by isHttpResponse.
         *
         * @memberof HttpResponse
         */
        this.isHttpResponse = true;
        /**
         * Specify if the body property is a stream.
         *
         * @type {boolean}
         * @memberof HttpResponse
         */
        this.stream = false;
        this.cookies = {};
        this.headers = {};
        if (typeof body !== 'undefined') {
            this.body = body;
        }
        this.stream = options.stream || false;
    }
    /**
     * Add or replace a header in the response.
     *
     * @param {string} name - The header name.
     * @param {string} value - The value name.
     * @returns {this}
     * @memberof HttpResponse
     */
    setHeader(name, value) {
        this.headers[name] = value;
        return this;
    }
    /**
     * Read the value of a header added with setHeader.
     *
     * @param {string} name - The header name.
     * @returns {(string|undefined)} The header value or undefined if it
     * does not exist.
     * @memberof HttpResponse
     */
    getHeader(name) {
        return this.headers[name];
    }
    /**
     * Read all the headers added with setHeader.
     *
     * @returns {{ [key: string]: string }} - The headers.
     * @memberof HttpResponse
     */
    getHeaders() {
        return { ...this.headers };
    }
    /**
     * Add or replace a cookie in the response.
     *
     * @param {string} name - The cookie name.
     * @param {string} value - The cookie value.
     * @param {CookieOptions} [options={}] - The cookie directives if any.
     * @returns {this}
     * @memberof HttpResponse
     */
    setCookie(name, value, options = {}) {
        this.cookies[name] = { value, options };
        return this;
    }
    /**
     * Read the value and directives of a cookie added with setCookie.
     *
     * @param {string} name - The cookie name.
     * @returns {({ value: string|undefined, options: CookieOptions })} The cookie value and directives
     * or undefined and an empty object if the cookie does not exist.
     * @memberof HttpResponse
     */
    getCookie(name) {
        if (!this.cookies[name]) {
            return { value: undefined, options: {} };
        }
        const { value, options } = this.cookies[name];
        return { value, options: { ...options } };
    }
    /**
     * Read all the cookies added with setCookie.
     *
     * @returns {({ [key: string]: { value: string|undefined, options: CookieOptions } })}
     * The name, value and directives of the cookies.
     * @memberof HttpResponse
     */
    getCookies() {
        const cookies = {};
        for (const cookieName in this.cookies) {
            const { value, options } = this.cookies[cookieName];
            cookies[cookieName] = { value, options: { ...options } };
        }
        return cookies;
    }
}
exports.HttpResponse = HttpResponse;
/**
 * Check if an object is an instance of HttpResponse.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponse} - True if the error is an instance of HttpResponse. False otherwise.
 */
function isHttpResponse(obj) {
    return obj instanceof HttpResponse ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponse === true);
}
exports.isHttpResponse = isHttpResponse;
/* 2xx Success */
/**
 * Represent an HTTP response with a success status 2xx.
 *
 * @export
 * @abstract
 * @class HttpResponseSuccess
 * @extends {HttpResponse}
 */
class HttpResponseSuccess extends HttpResponse {
    /**
     * Create an instance of HttpResponseSuccess.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseSuccess
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseSuccess.
         *
         * @memberof HttpResponseSuccess
         */
        this.isHttpResponseSuccess = true;
    }
}
exports.HttpResponseSuccess = HttpResponseSuccess;
/**
 * Check if an object is an instance of HttpResponseSuccess.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseSuccess} - True if the error is an instance of HttpResponseSuccess. False otherwise.
 */
function isHttpResponseSuccess(obj) {
    return obj instanceof HttpResponseSuccess ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseSuccess === true);
}
exports.isHttpResponseSuccess = isHttpResponseSuccess;
/**
 * Represent an HTTP response with the status 200 - OK.
 *
 * @export
 * @class HttpResponseOK
 * @extends {HttpResponseSuccess}
 */
class HttpResponseOK extends HttpResponseSuccess {
    /**
     * Create an instance of HttpResponseOK.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseOK
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseOK.
         *
         * @memberof HttpResponseOK
         */
        this.isHttpResponseOK = true;
        this.statusCode = 200;
        this.statusMessage = 'OK';
    }
}
exports.HttpResponseOK = HttpResponseOK;
/**
 * Check if an object is an instance of HttpResponseOK.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseOK} - True if the error is an instance of HttpResponseOK. False otherwise.
 */
function isHttpResponseOK(obj) {
    return obj instanceof HttpResponseOK ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseOK === true);
}
exports.isHttpResponseOK = isHttpResponseOK;
/**
 * Represent an HTTP response with the status 201 - CREATED.
 *
 * @export
 * @class HttpResponseCreated
 * @extends {HttpResponseSuccess}
 */
class HttpResponseCreated extends HttpResponseSuccess {
    /**
     * Create an instance of HttpResponseCreated.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseCreated
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseCreated.
         *
         * @memberof HttpResponseCreated
         */
        this.isHttpResponseCreated = true;
        this.statusCode = 201;
        this.statusMessage = 'CREATED';
    }
}
exports.HttpResponseCreated = HttpResponseCreated;
/**
 * Check if an object is an instance of HttpResponseCreated.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseCreated} - True if the error is an instance of HttpResponseCreated. False otherwise.
 */
function isHttpResponseCreated(obj) {
    return obj instanceof HttpResponseCreated ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseCreated === true);
}
exports.isHttpResponseCreated = isHttpResponseCreated;
/**
 * Represent an HTTP response with the status 204 - NO CONTENT.
 *
 * @export
 * @class HttpResponseNoContent
 * @extends {HttpResponseSuccess}
 */
class HttpResponseNoContent extends HttpResponseSuccess {
    /**
     * Create an instance of HttpResponseNoContent.
     * @memberof HttpResponseNoContent
     */
    constructor() {
        super();
        /**
         * Property used internally by is HttpResponseNoContent.
         *
         * @memberof HttpResponseNoContent
         */
        this.isHttpResponseNoContent = true;
        this.statusCode = 204;
        this.statusMessage = 'NO CONTENT';
    }
}
exports.HttpResponseNoContent = HttpResponseNoContent;
/**
 * Check if an object is an instance of HttpResponseNoContent.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseNoContent} - True if the error is an instance of HttpResponseNoContent. False otherwise.
 */
function isHttpResponseNoContent(obj) {
    return obj instanceof HttpResponseNoContent ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseNoContent === true);
}
exports.isHttpResponseNoContent = isHttpResponseNoContent;
/* 3xx Redirection */
/**
 * Represent an HTTP response with a redirection status 3xx.
 *
 * @export
 * @abstract
 * @class HttpResponseRedirection
 * @extends {HttpResponse}
 */
class HttpResponseRedirection extends HttpResponse {
    /**
     * Create an instance of HttpResponseRedirection.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseRedirection
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseRedirection.
         *
         * @memberof HttpResponseRedirection
         */
        this.isHttpResponseRedirection = true;
    }
}
exports.HttpResponseRedirection = HttpResponseRedirection;
/**
 * Check if an object is an instance of HttpResponseRedirection.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseRedirection} - True if the error is an instance of HttpResponseRedirection.
 * False otherwise.
 */
function isHttpResponseRedirection(obj) {
    return obj instanceof HttpResponseRedirection ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseRedirection === true);
}
exports.isHttpResponseRedirection = isHttpResponseRedirection;
/**
 * Represent an HTTP response with the status 301 - MOVED PERMANENTLY.
 *
 * @export
 * @class HttpResponseMovedPermanently
 * @extends {HttpResponseRedirection}
 */
class HttpResponseMovedPermanently extends HttpResponseRedirection {
    /**
     * Create an instance of HttpResponseMovedPermanently.
     * @param {string} path - The redirection path.
     * @memberof HttpResponseMovedPermanently
     */
    constructor(path) {
        super();
        this.path = path;
        /**
         * Property used internally by isHttpResponseMovedPermanently.
         *
         * @memberof isHttpResponseMovedPermanently
         */
        this.isHttpResponseMovedPermanently = true;
        this.statusCode = 301;
        this.statusMessage = 'MOVED PERMANENTLY';
    }
}
exports.HttpResponseMovedPermanently = HttpResponseMovedPermanently;
/**
 * Check if an object is an instance of HttpResponseMovedPermanently.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseMovedPermanently} - True if the error is an
 * instance of HttpResponseMovedPermanently. False otherwise.
 */
function isHttpResponseMovedPermanently(obj) {
    return obj instanceof HttpResponseMovedPermanently ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseMovedPermanently === true);
}
exports.isHttpResponseMovedPermanently = isHttpResponseMovedPermanently;
/**
 * Represent an HTTP response with the status 302 - FOUND.
 *
 * @export
 * @class HttpResponseRedirect
 * @extends {HttpResponseRedirection}
 */
class HttpResponseRedirect extends HttpResponseRedirection {
    /**
     * Create an instance of HttpResponseRedirect.
     * @param {string} path - The redirection path.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseRedirect
     */
    constructor(path, body, options = {}) {
        super(body, options);
        this.path = path;
        /**
         * Property used internally by isHttpResponseRedirect.
         *
         * @memberof HttpResponseRedirect
         */
        this.isHttpResponseRedirect = true;
        this.statusCode = 302;
        this.statusMessage = 'FOUND';
    }
}
exports.HttpResponseRedirect = HttpResponseRedirect;
/**
 * Check if an object is an instance of HttpResponseRedirect.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseRedirect} - True if the error is an instance of HttpResponseRedirect. False otherwise.
 */
function isHttpResponseRedirect(obj) {
    return obj instanceof HttpResponseRedirect ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseRedirect === true);
}
exports.isHttpResponseRedirect = isHttpResponseRedirect;
/* 4xx Client Error */
/**
 * Represent an HTTP response with a client error status 4xx.
 *
 * @export
 * @abstract
 * @class HttpResponseClientError
 * @extends {HttpResponse}
 */
class HttpResponseClientError extends HttpResponse {
    /**
     * Create an instance of HttpResponseClientError.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseClientError
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseClientError.
         *
         * @memberof HttpResponseClientError
         */
        this.isHttpResponseClientError = true;
    }
}
exports.HttpResponseClientError = HttpResponseClientError;
/**
 * Check if an object is an instance of HttpResponseClientError.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseClientError} - True if the error is an instance of HttpResponseClientError.
 * False otherwise.
 */
function isHttpResponseClientError(obj) {
    return obj instanceof HttpResponseClientError ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseClientError === true);
}
exports.isHttpResponseClientError = isHttpResponseClientError;
/**
 * Represent an HTTP response with the status 400 - BAD REQUEST.
 *
 * @export
 * @class HttpResponseBadRequest
 * @extends {HttpResponseClientError}
 */
class HttpResponseBadRequest extends HttpResponseClientError {
    /**
     * Create an instance of HttpResponseBadRequest.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseBadRequest
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseBadRequest.
         *
         * @memberof HttpResponseBadRequest
         */
        this.isHttpResponseBadRequest = true;
        this.statusCode = 400;
        this.statusMessage = 'BAD REQUEST';
    }
}
exports.HttpResponseBadRequest = HttpResponseBadRequest;
/**
 * Check if an object is an instance of HttpResponseBadRequest.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseBadRequest} - True if the error is an instance of HttpResponseBadRequest.
 * False otherwise.
 */
function isHttpResponseBadRequest(obj) {
    return obj instanceof HttpResponseBadRequest ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseBadRequest === true);
}
exports.isHttpResponseBadRequest = isHttpResponseBadRequest;
/**
 * Represent an HTTP response with the status 401 - UNAUTHORIZED.
 *
 * @export
 * @class HttpResponseUnauthorized
 * @extends {HttpResponseClientError}
 */
class HttpResponseUnauthorized extends HttpResponseClientError {
    /**
     * Create an instance of HttpResponseUnauthorized.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseUnauthorized
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseUnauthorized.
         *
         * @memberof HttpResponseUnauthorized
         */
        this.isHttpResponseUnauthorized = true;
        this.statusCode = 401;
        this.statusMessage = 'UNAUTHORIZED';
        this.setHeader('WWW-Authenticate', '');
    }
}
exports.HttpResponseUnauthorized = HttpResponseUnauthorized;
/**
 * Check if an object is an instance of HttpResponseUnauthorized.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseUnauthorized} - True if the error is an instance of HttpResponseUnauthorized.
 * False otherwise.
 */
function isHttpResponseUnauthorized(obj) {
    return obj instanceof HttpResponseUnauthorized ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseUnauthorized === true);
}
exports.isHttpResponseUnauthorized = isHttpResponseUnauthorized;
/**
 * Represent an HTTP response with the status 403 - FORBIDDEN.
 *
 * @export
 * @class HttpResponseForbidden
 * @extends {HttpResponseClientError}
 */
class HttpResponseForbidden extends HttpResponseClientError {
    /**
     * Create an instance of HttpResponseForbidden.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseForbidden
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseForbidden.
         *
         * @memberof HttpResponseForbidden
         */
        this.isHttpResponseForbidden = true;
        this.statusCode = 403;
        this.statusMessage = 'FORBIDDEN';
    }
}
exports.HttpResponseForbidden = HttpResponseForbidden;
/**
 * Check if an object is an instance of HttpResponseForbidden.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseForbidden} - True if the error is an instance of HttpResponseForbidden. False otherwise.
 */
function isHttpResponseForbidden(obj) {
    return obj instanceof HttpResponseForbidden ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseForbidden === true);
}
exports.isHttpResponseForbidden = isHttpResponseForbidden;
/**
 * Represent an HTTP response with the status 404 - NOT FOUND.
 *
 * @export
 * @class HttpResponseNotFound
 * @extends {HttpResponseClientError}
 */
class HttpResponseNotFound extends HttpResponseClientError {
    /**
     * Create an instance of HttpResponseNotFound.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseNotFound
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseNotFound.
         *
         * @memberof HttpResponseNotFound
         */
        this.isHttpResponseNotFound = true;
        this.statusCode = 404;
        this.statusMessage = 'NOT FOUND';
    }
}
exports.HttpResponseNotFound = HttpResponseNotFound;
/**
 * Check if an object is an instance of HttpResponseNotFound.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseNotFound} - True if the error is an instance of HttpResponseNotFound. False otherwise.
 */
function isHttpResponseNotFound(obj) {
    return obj instanceof HttpResponseNotFound ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseNotFound === true);
}
exports.isHttpResponseNotFound = isHttpResponseNotFound;
/**
 * Represent an HTTP response with the status 405 - METHOD NOT ALLOWED.
 *
 * @export
 * @class HttpResponseMethodNotAllowed
 * @extends {HttpResponseClientError}
 */
class HttpResponseMethodNotAllowed extends HttpResponseClientError {
    /**
     * Create an instance of HttpResponseMethodNotAllowed.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseMethodNotAllowed
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseMethodNotAllowed.
         *
         * @memberof HttpResponseMethodNotAllowed
         */
        this.isHttpResponseMethodNotAllowed = true;
        this.statusCode = 405;
        this.statusMessage = 'METHOD NOT ALLOWED';
    }
}
exports.HttpResponseMethodNotAllowed = HttpResponseMethodNotAllowed;
/**
 * Check if an object is an instance of HttpResponseMethodNotAllowed.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseMethodNotAllowed} - True if the error is an instance of HttpResponseMethodNotAllowed.
 * False otherwise.
 */
function isHttpResponseMethodNotAllowed(obj) {
    return obj instanceof HttpResponseMethodNotAllowed ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseMethodNotAllowed === true);
}
exports.isHttpResponseMethodNotAllowed = isHttpResponseMethodNotAllowed;
/**
 * Represent an HTTP response with the status 409 - CONFLICT.
 *
 * @export
 * @class HttpResponseConflict
 * @extends {HttpResponseClientError}
 */
class HttpResponseConflict extends HttpResponseClientError {
    /**
     * Create an instance of HttpResponseConflict.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseConflict
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseConflict.
         *
         * @memberof HttpResponseConflict
         */
        this.isHttpResponseConflict = true;
        this.statusCode = 409;
        this.statusMessage = 'CONFLICT';
    }
}
exports.HttpResponseConflict = HttpResponseConflict;
/**
 * Check if an object is an instance of HttpResponseConflict.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseConflict} - True if the error is an instance of HttpResponseConflict. False otherwise.
 */
function isHttpResponseConflict(obj) {
    return obj instanceof HttpResponseConflict ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseConflict === true);
}
exports.isHttpResponseConflict = isHttpResponseConflict;
/**
 * Represent an HTTP response with the status 429 - TOO MANY REQUESTS.
 *
 * @export
 * @class HttpResponseTooManyRequests
 * @extends {HttpResponseClientError}
 */
class HttpResponseTooManyRequests extends HttpResponseClientError {
    /**
     * Create an instance of HttpResponseTooManyRequests.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseTooManyRequests
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseTooManyRequests.
         *
         * @memberof HttpResponseTooManyRequests
         */
        this.isHttpResponseTooManyRequests = true;
        this.statusCode = 429;
        this.statusMessage = 'TOO MANY REQUESTS';
    }
}
exports.HttpResponseTooManyRequests = HttpResponseTooManyRequests;
/**
 * Check if an object is an instance of HttpResponseTooManyRequests.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseTooManyRequests} - True if the error is an instance of HttpResponseTooManyRequests.
 * False otherwise.
 */
function isHttpResponseTooManyRequests(obj) {
    return obj instanceof HttpResponseTooManyRequests ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseTooManyRequests === true);
}
exports.isHttpResponseTooManyRequests = isHttpResponseTooManyRequests;
/* 5xx Server Error */
/**
 * Represent an HTTP response with a server error status 5xx.
 *
 * @export
 * @abstract
 * @class HttpResponseServerError
 * @extends {HttpResponse}
 */
class HttpResponseServerError extends HttpResponse {
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseServerError.
         *
         * @memberof HttpResponseServerError
         */
        this.isHttpResponseServerError = true;
    }
}
exports.HttpResponseServerError = HttpResponseServerError;
/**
 * Check if an object is an instance of HttpResponseServerError.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseServerError} - True if the error is an instance of HttpResponseServerError.
 * False otherwise.
 */
function isHttpResponseServerError(obj) {
    return obj instanceof HttpResponseServerError ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseServerError === true);
}
exports.isHttpResponseServerError = isHttpResponseServerError;
/**
 * Represent an HTTP response with the status 500 - INTERNAL SERVER ERROR.
 *
 * @export
 * @class HttpResponseInternalServerError
 * @extends {HttpResponseServerError}
 */
class HttpResponseInternalServerError extends HttpResponseServerError {
    /**
     * Create an instance of HttpResponseInternalServerError.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseInternalServerError
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseInternalServerError.
         *
         * @memberof HttpResponseInternalServerError
         */
        this.isHttpResponseInternalServerError = true;
        this.statusCode = 500;
        this.statusMessage = 'INTERNAL SERVER ERROR';
        this.error = options.error;
        this.ctx = options.ctx;
    }
}
exports.HttpResponseInternalServerError = HttpResponseInternalServerError;
/**
 * Check if an object is an instance of HttpResponseInternalServerError.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseInternalServerError} - True if the error is an instance of
 * HttpResponseInternalServerError. False otherwise.
 */
function isHttpResponseInternalServerError(obj) {
    return obj instanceof HttpResponseInternalServerError ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseInternalServerError === true);
}
exports.isHttpResponseInternalServerError = isHttpResponseInternalServerError;
/**
 * Represent an HTTP response with the status 501 - NOT IMPLEMENTED.
 *
 * @export
 * @class HttpResponseNotImplemented
 * @extends {HttpResponseServerError}
 */
class HttpResponseNotImplemented extends HttpResponseServerError {
    /**
     * Create an instance of HttpResponseNotImplemented.
     * @param {*} [body] - Optional body of the response.
     * @memberof HttpResponseNotImplemented
     */
    constructor(body, options = {}) {
        super(body, options);
        /**
         * Property used internally by isHttpResponseNotImplemented.
         *
         * @memberof HttpResponseNotImplemented
         */
        this.isHttpResponseNotImplemented = true;
        this.statusCode = 501;
        this.statusMessage = 'NOT IMPLEMENTED';
    }
}
exports.HttpResponseNotImplemented = HttpResponseNotImplemented;
/**
 * Check if an object is an instance of HttpResponseNotImplemented.
 *
 * This function is a help when you have several packages using @foal/core.
 * Npm can install the package several times, which leads to duplicate class
 * definitions. If this is the case, the keyword `instanceof` may return false
 * while the object is an instance of the class. This function fixes this
 * problem.
 *
 * @export
 * @param {*} obj - The object to check.
 * @returns {obj is HttpResponseNotImplemented} - True if the error is an instance of HttpResponseNotImplemented.
 * False otherwise.
 */
function isHttpResponseNotImplemented(obj) {
    return obj instanceof HttpResponseNotImplemented ||
        (typeof obj === 'object' && obj !== null && obj.isHttpResponseNotImplemented === true);
}
exports.isHttpResponseNotImplemented = isHttpResponseNotImplemented;
