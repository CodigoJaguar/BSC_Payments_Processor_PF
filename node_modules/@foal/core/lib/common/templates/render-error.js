"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderError = void 0;
// std
const fs_1 = require("fs");
const path_1 = require("path");
const util_1 = require("util");
// FoalTS
const core_1 = require("../../core");
const render_1 = require("./render");
/**
 * Renders the default HTML page when an error is thrown or rejected in the application.
 *
 * The page is different depending on if the configuration key `settings.debug` is
 * true or false.
 *
 * @export
 * @param {Error} error - The error thrown or rejected.
 * @param {Context} ctx - The Context object.
 * @returns {Promise<HttpResponseInternalServerError>} The HTTP response.
 */
async function renderError(error, ctx) {
    let body = '<html><head><title>INTERNAL SERVER ERROR</title></head><body>'
        + '<h1>500 - INTERNAL SERVER ERROR</h1></body></html>';
    if (core_1.Config.get('settings.debug', 'boolean')) {
        const template = await (0, util_1.promisify)(fs_1.readFile)((0, path_1.join)(__dirname, '500.debug.html'), 'utf8');
        const rex = /at (.*) \((.*):(\d+):(\d+)\)/;
        const [, , path, line, column] = Array.from(rex.exec(error.stack || '') || []);
        body = (0, render_1.renderToString)(template, {
            column,
            filename: (0, path_1.basename)(path || ''),
            line,
            message: error.message,
            name: error.name,
            stack: error.stack,
        });
    }
    return new core_1.HttpResponseInternalServerError(body, { ctx, error });
}
exports.renderError = renderError;
