"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createController = void 0;
// std
const path_1 = require("path");
// FoalTS
const file_system_1 = require("../../file-system");
const utils_1 = require("../../utils");
function createController({ name, register }) {
    const fs = new file_system_1.FileSystem();
    let root = '';
    if (fs.exists('src/app/controllers')) {
        root = 'src/app/controllers';
    }
    else if (fs.exists('controllers')) {
        root = 'controllers';
    }
    const names = (0, utils_1.getNames)((0, path_1.basename)(name));
    const subdir = (0, path_1.dirname)(name);
    const parentControllerPath = `${subdir === '.' ? 'app' : (0, path_1.basename)(subdir)}.controller.ts`;
    const fileName = `${names.kebabName}.controller.ts`;
    const specFileName = `${names.kebabName}.controller.spec.ts`;
    const className = `${names.upperFirstCamelName}Controller`;
    fs
        .cd(root)
        .ensureDir(subdir)
        .cd(subdir)
        .render('controller/controller.empty.ts', fileName, names)
        .render('controller/controller.spec.empty.ts', specFileName, names)
        .ensureFile('index.ts')
        .addNamedExportIn('index.ts', className, `./${names.kebabName}.controller`);
    if (register) {
        fs
            .cd('..')
            .addOrExtendNamedImportIn(parentControllerPath, 'controller', '@foal/core', { logs: false })
            .addOrExtendNamedImportIn(parentControllerPath, className, `./${subdir === '.' ? 'controllers' : (0, path_1.basename)(subdir)}`, { logs: false })
            .addOrExtendClassArrayPropertyIn(parentControllerPath, 'subControllers', `controller('/${names.kebabName}', ${className})`);
    }
}
exports.createController = createController;
